// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class GLibNativeGenerated {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GLibNativeGenerated(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GLibNativeGenerated.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int native_initialize_dart_api(
    gpointer data,
  ) {
    return _native_initialize_dart_api(
      data,
    );
  }

  late final _native_initialize_dart_apiPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(gpointer)>>(
          'native_initialize_dart_api');
  late final _native_initialize_dart_api =
      _native_initialize_dart_apiPtr.asFunction<int Function(gpointer)>();

  void native_register_dart_port(
    int value,
  ) {
    return _native_register_dart_port(
      value,
    );
  }

  late final _native_register_dart_portPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Port)>>(
          'native_register_dart_port');
  late final _native_register_dart_port =
      _native_register_dart_portPtr.asFunction<void Function(int)>();

  void native_work_finished(
    ffi.Pointer<NativeFuncParam> param,
  ) {
    return _native_work_finished(
      param,
    );
  }

  late final _native_work_finishedPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeFuncParam>)>>(
      'native_work_finished');
  late final _native_work_finished = _native_work_finishedPtr
      .asFunction<void Function(ffi.Pointer<NativeFuncParam>)>();

  void native_start_work() {
    return _native_start_work();
  }

  late final _native_start_workPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('native_start_work');
  late final _native_start_work =
      _native_start_workPtr.asFunction<void Function()>();

  void native_register_main_thread_callback(
    native_run_func func,
  ) {
    return _native_register_main_thread_callback(
      func,
    );
  }

  late final _native_register_main_thread_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(native_run_func)>>(
          'native_register_main_thread_callback');
  late final _native_register_main_thread_callback =
      _native_register_main_thread_callbackPtr
          .asFunction<void Function(native_run_func)>();
}

class NativeFuncParam extends ffi.Struct {
  @ffi.Int32()
  external int func_type;

  @ffi.Array.multi([10])
  external ffi.Array<gpointer> params;

  @gboolean()
  external int finished;
}

abstract class NativeFuncTypes {
  static const int HELLO = 0;
  static const int SAY = 1;
}

typedef gpointer = ffi.Pointer<ffi.Void>;
typedef gboolean = gint;
typedef gint = ffi.Int32;

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
typedef native_run_func = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeFuncParam>)>>;
